{"name":"Play2-html5tags","tagline":"HTML5 input tags module for Play Framework","body":"# HTML5 input tags module for Play 2\r\n## for Java and Scala\r\n\r\nThis module brings client side validation attributes (required, max|min length, ...) and formats (date, number, email, ...) to Play 2 templates.\r\n\r\nThe provided tags can also display forms with special input controls, like a numeric keypad to enter numbers on a smartphone.\r\n\r\nAttributes are generated from the constraints defined in the model or in a form mapping. They can generate several kinds of input : \r\n\r\n * text\r\n * email (validates that it's an email pattern)\r\n * tel (enables numeric keypad on mobile)\r\n * number (enables numeric keyboard on mobile, and specific input on other browsers) \r\n * date (enables date selection - through a calendar on compatible browsers)\r\n * url (validates that it's an url pattern)\r\n * search (enables special display for this kind of input)\r\n * password \r\n * custom formats (using regular expression patterns)\r\n\r\n## How to install it\r\n\r\nIn your application, add this configuration to the `project/Build.scala` file :\r\n\r\n```scala\r\nval appDependencies = Seq(\r\n  //your dependencies\r\n  \"com.loicdescotte.coffeebean\" % \"html5tags_2.10\" % \"1.0\"\r\n)\r\n\r\nval main = play.Project(appName, appVersion, appDependencies).settings(\r\n  //your settings\r\n  resolvers += Resolver.url(\"github repo for html5tags\", url(\"http://loicdescotte.github.com/releases/\"))(Resolver.ivyStylePatterns)\r\n)\r\n```\r\n  \r\nNote : for Play 2.0.x, use `\"com.loicdescotte.coffeebean\" % \"html5tags_2.9.1\" % \"1.0-beta\"` dependency.\r\n\r\n## Code examples\r\n\r\nWith this view template : \r\n\r\n```scala\r\n@import html5.tags.html._\r\n\r\n@text(form(\"name\"), 'label -> \"Your name : \")\r\n@number(form(\"age\"), 'label -> \"Your age : \") \r\n```\r\n\r\nIf your form mapping is defined like this (Scala) :\r\n\r\n```scala\r\nmapping(          \r\n  \"name\" -> nonEmptyText(maxLength=10),\r\n  \"age\" -> number\r\n)\r\n```\r\n\r\nOr if your model contains this (Java) :\r\n\r\n```java\r\n@Constraints.Required\r\n@Constraints.MaxLength(10)\r\npublic String name;\r\n\r\npublic Integer age;\r\n```\r\n \r\nThe generated output will be : \r\n \r\n```html \r\n<input type=\"text\" id=\"name\" name=\"name\" value=\"\" label=\"Your name : \" required maxlength=\"10\">\r\n<input type=\"number\" id=\"age\" name=\"age\" value=\"\" label=\"Your age : \">\r\n```\r\n    \r\nThen the browser will check that the `name` field is not empty and the `age` input is a number, before sending to server. \r\nIt will also limit the length of the `name` input.\r\n\r\nNote : you can check browsers compatibility for this new attributes on [wufoo] (http://wufoo.com/html5/).\r\n\r\n## A few examples with pictures\r\n\r\nEmail validation :\r\n\r\n![Image](http://wufoo.com/html5/images/email-supported-firefox4b12.png)\r\n\r\nTelephone number keyboard (on Safari mobile) :\r\n\r\n![Image](http://wufoo.com/html5/images/tel-mobsafari-supported.png)\r\n\r\n## Available tags and formats\r\n\r\nYou can use the following tags : \r\n\r\n * `@date`\r\n * `@email`\r\n * `@number`\r\n * `@password`\r\n * `@search`\r\n * `@tel`\r\n * `@text`\r\n * `@url`\r\n\r\nAnd the following constraint values on models/mappings :\r\n\r\n * required (or nonEmpty or nonEmptyText)\r\n * maxLength\r\n * minLength\r\n * max\r\n * min\r\n * pattern (Play 2.1(+) required)\r\n\r\n## Magic tag\r\n\r\nThe `text` tag is able to change the input type if a specific format is detected.\r\n\r\nFor example, using the email constraint :\r\n\r\n    @Constraints.Email\r\n    public String contactMail;\r\n     \r\nAnd this tag :\r\n  \r\n    @text(form(\"contactMail\"), 'label -> \"Your mail : \")\r\n\r\nThe generated output will be :\r\n\r\n    <input type=\"email\" id=\"contactMail\" name=\"contactMail\" value=\"\">\r\n\r\nAnd the browser will check that the field contains an email address.\r\n\r\nThe same trick is working with `number` input type if you use max/min constraints.\r\n\r\n## Important notes\r\n  \r\n### MinLength behavior\r\n\r\n  As `minLength` does not exist in HTML5 specification, a regular expression pattern will be used to simulate it. \r\n  If you need both 'minLength' and 'pattern' on a field, write the min length constraint directly in your regex pattern. Example : add `{2,}` to your pattern for minLength=2.\r\n\r\n### Browser regex patterns\r\n\r\n  You can check pattern compatibility with Javascript regular expressions (used by browsers) on [regexpal] (http://regexpal.com/) (check the 'Dot matches all') option.\r\n\r\n## License\r\n\r\nThis project is published under the Apache License v2.0.\r\n\r\nYou may obtain a copy of the License at [http://www.apache.org/licenses/LICENSE-2.0] (http://www.apache.org/licenses/LICENSE-2.0).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
